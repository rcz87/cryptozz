version: '3.8'

services:
  # Main Application Service
  app:
    build: .
    container_name: crypto-gpts-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/crypto_trading
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OKX_API_KEY=${OKX_API_KEY}
      - OKX_SECRET_KEY=${OKX_SECRET_KEY}
      - OKX_PASSPHRASE=${OKX_PASSPHRASE}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SESSION_SECRET=${SESSION_SECRET}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - crypto-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: crypto-postgres
    environment:
      - POSTGRES_DB=crypto_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - crypto-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - crypto-network
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: crypto-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - crypto-network

  # Monitoring & Health Check
  healthcheck:
    image: curlimages/curl:latest
    container_name: crypto-healthcheck
    depends_on:
      - app
    restart: "no"
    networks:
      - crypto-network
    command: >
      sh -c "
        sleep 30 &&
        curl -f http://app:5000/health || exit 1 &&
        echo 'Health check passed'
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto-network:
    driver: bridge