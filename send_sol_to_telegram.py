#!/usr/bin/env python3
"""
Script untuk menganalisa SOL dan mengirim ke Telegram
"""
import os
import sys
import asyncio
import requests
from datetime import datetime

# Add current directory to path
sys.path.append('.')

async def analyze_and_send_sol():
    """Analyze SOL and send to Telegram"""
    try:
        print("=== SOL ANALYSIS & TELEGRAM NOTIFICATION ===")
        
        # Step 1: Get SOL analysis from API
        print("📊 Fetching SOL analysis...")
        
        # Try local API first
        try:
            response = requests.get(
                "http://localhost:5000/api/gpts/sinyal/tajam",
                params={"symbol": "SOLUSDT", "format": "both"},
                timeout=30
            )
            
            if response.status_code == 200:
                sol_data = response.json()
                print("✅ SOL analysis retrieved from local API")
            else:
                raise Exception(f"API returned {response.status_code}")
                
        except Exception as e:
            print(f"⚠️ Local API failed: {e}")
            # Try production API as fallback
            try:
                response = requests.get(
                    "https://crypto-analysis-dashboard-rcz887.replit.app/api/gpts/sinyal/tajam",
                    params={"symbol": "SOLUSDT", "format": "both"},
                    timeout=30
                )
                if response.status_code == 200:
                    sol_data = response.json()
                    print("✅ SOL analysis retrieved from production API")
                else:
                    raise Exception(f"Production API returned {response.status_code}")
            except Exception as e2:
                print(f"❌ Both APIs failed: {e2}")
                return False
        
        # Step 2: Validate analysis data
        if not sol_data.get('success'):
            print(f"❌ Analysis failed: {sol_data.get('error', 'Unknown error')}")
            return False
        
        print(f"✅ SOL Analysis successful:")
        print(f"   Symbol: {sol_data.get('symbol', 'N/A')}")
        print(f"   Signal: {sol_data.get('signal', 'N/A')}")
        print(f"   Confidence: {sol_data.get('confidence', 0):.1%}")
        print(f"   Current Price: ${sol_data.get('current_price', 0)}")
        
        # Step 3: Initialize Telegram bot
        print("\\n🤖 Initializing Telegram bot...")
        from core.telegram_bot import TelegramBot
        
        bot = TelegramBot()
        print("✅ Telegram bot initialized")
        
        # Test bot connection
        bot_info = await bot.bot.get_me()
        print(f"✅ Bot connected: @{bot_info.username}")
        
        # Step 4: Send analysis to Telegram
        print("\\n📱 Sending SOL analysis to Telegram...")
        
        if bot.chat_ids:
            await bot.send_signal(sol_data)
            print(f"✅ SOL analysis sent to {len(bot.chat_ids)} subscribers")
        else:
            print("⚠️ No subscribers registered")
            print("📋 Formatted message preview:")
            
            # Show formatted message
            symbol = sol_data.get('symbol', 'SOLUSDT')
            signal = sol_data.get('signal', 'NEUTRAL')
            confidence = sol_data.get('confidence', 0)
            current_price = sol_data.get('current_price', 0)
            entry_price = sol_data.get('entry_price', 0)
            take_profit = sol_data.get('take_profit', 0)
            stop_loss = sol_data.get('stop_loss', 0)
            
            signal_emoji = "🟢" if signal in ["BUY", "LONG"] else "🔴" if signal in ["SELL", "SHORT"] else "⚪"
            
            telegram_msg = f"""
{signal_emoji} <b>SHARP SIGNAL ALERT - SOL ANALYSIS</b> {signal_emoji}

📊 <b>Pair:</b> {symbol}
📈 <b>Signal:</b> {signal}
💯 <b>Confidence:</b> {confidence:.1%}

💰 <b>Current Price:</b> ${current_price:,.2f}
💰 <b>Entry Price:</b> ${entry_price:,.2f}
🎯 <b>Take Profit:</b> ${take_profit:,.2f}
🛡 <b>Stop Loss:</b> ${stop_loss:,.2f}

📝 <b>Analysis:</b>
{sol_data.get('human_readable', 'Analysis not available')[:200]}...

🤖 <b>XAI Explanation:</b>
{sol_data.get('xai_explanation', {}).get('explanation', 'XAI not available')[:150]}...

⏰ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC

<i>Generated by RZC GPS Trading Bot</i>
"""
            
            print(telegram_msg.strip())
            
            # For demonstration, let's try sending to a test chat (if any)
            # In production, users would need to /start the bot first
            print("\\n💡 To receive this analysis:")
            print("1. Open Telegram and search: @rzcgpsbot") 
            print("2. Send /start command to subscribe")
            print("3. Bot will send automatic signals like this")
        
        return True
        
    except Exception as e:
        print(f"❌ Failed to analyze and send SOL: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(analyze_and_send_sol())
    print(f"\\n=== RESULT: {'SUCCESS' if result else 'FAILED'} ===")