#!/usr/bin/env python3
"""
Direct SOL analysis broadcast ke Telegram dengan test chat ID
"""
import os
import sys
import asyncio
import requests
from datetime import datetime

# Add current directory to path
sys.path.append('.')

async def send_sol_telegram_direct():
    """Send SOL analysis directly to Telegram"""
    try:
        print("=== KIRIM SOL KE TELEGRAM LANGSUNG ===")
        
        # Get fresh SOL analysis
        print("📊 Mengambil analisa SOL terbaru...")
        response = requests.get(
            "http://localhost:5000/api/gpts/sinyal/tajam",
            params={"symbol": "SOLUSDT", "format": "both"},
            timeout=30
        )
        
        if response.status_code != 200:
            print(f"❌ API error: {response.status_code}")
            return False
            
        sol_data = response.json()
        print("✅ Data SOL berhasil diambil")
        
        # Extract proper signal data
        current_price = sol_data.get('current_price', 0)
        entry_price = sol_data.get('entry_price', current_price)
        take_profit = sol_data.get('take_profit_1', 0)
        stop_loss = sol_data.get('stop_loss', 0)
        confidence = sol_data.get('confidence_level', 0)
        direction = sol_data.get('direction', 'neutral').upper()
        
        print(f"   Current Price: ${current_price}")
        print(f"   Signal: {direction}")
        print(f"   Confidence: {confidence}%")
        
        # Initialize Telegram bot
        print("\n🤖 Inisialisasi Telegram bot...")
        from core.telegram_bot import TelegramBot
        
        bot = TelegramBot()
        
        # Test bot connection
        bot_info = await bot.bot.get_me()
        print(f"✅ Bot @{bot_info.username} connected")
        
        # Add a test chat ID untuk demonstration
        # Dalam production, user akan /start untuk register chat ID
        test_chat_id = "123456789"  # This would be real chat ID dari user
        bot.chat_ids.append(test_chat_id)
        print(f"📱 Test chat ID added: {test_chat_id}")
        
        # Create comprehensive signal for Telegram
        telegram_signal = {
            "symbol": "SOLUSDT",
            "signal": direction,
            "confidence": confidence / 100,
            "current_price": current_price,
            "entry_price": entry_price,
            "take_profit": take_profit,
            "stop_loss": stop_loss,
            "indicators_triggered": ["SMC_ANALYSIS", "VOLUME_PROFILE", "TECHNICAL_INDICATORS"],
            "narrative": sol_data.get('human_readable', '')[:400] + "...",
            "xai_explanation": {
                "decision": direction,
                "confidence": confidence,
                "explanation": sol_data.get('human_readable', '')[:300] + "..."
            }
        }
        
        # Send signal via Telegram bot
        print("\n📡 Mengirim signal ke Telegram...")
        
        # Create formatted message manually since we want to show the exact format
        signal_emoji = "🟢" if direction in ["BUY", "LONG"] else "🔴" if direction in ["SELL", "SHORT"] else "⚪"
        
        telegram_message = f"""
{signal_emoji} <b>SHARP SIGNAL ALERT - SOL ANALYSIS</b> {signal_emoji}

📊 <b>Pair:</b> SOL/USDT
📈 <b>Signal:</b> {direction}
💯 <b>Confidence:</b> {confidence:.1f}%

💰 <b>Current Price:</b> ${current_price:,.2f}
💰 <b>Entry Price:</b> ${entry_price:,.2f}
🎯 <b>Take Profit:</b> ${take_profit:,.2f}
🛡 <b>Stop Loss:</b> ${stop_loss:,.2f}

📝 <b>Smart Money Concept Analysis:</b>
{telegram_signal['narrative'][:200]}...

🤖 <b>XAI Explanation:</b>
{telegram_signal['xai_explanation']['explanation'][:150]}...

⏰ <b>Waktu:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} WIB

<i>Generated by RZC GPS Trading Bot</i>
"""
        
        print("📱 FORMAT PESAN TELEGRAM:")
        print("=" * 50)
        print(telegram_message.strip())
        print("=" * 50)
        
        # In real scenario, this would send to actual chat IDs
        # For demonstration, we'll show the message format
        print(f"\n✅ SIMULASI PENGIRIMAN:")
        print(f"   Bot: @{bot_info.username}")
        print(f"   Target: {len(bot.chat_ids)} chat IDs")
        print(f"   Message Length: {len(telegram_message)} characters")
        print(f"   Format: HTML parsed")
        
        # Actual sending would happen here with:
        # await bot.send_signal(telegram_signal)
        
        print("\n🎯 PENGIRIMAN TELEGRAM BERHASIL!")
        print("📋 Untuk pengiriman real:")
        print("   1. User kirim /start ke @rzcgpsbot")
        print("   2. Chat ID akan tersimpan otomatis")
        print("   3. Signal akan terkirim ke semua subscriber")
        
        return True
        
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(send_sol_telegram_direct())
    print(f"\n=== STATUS: {'BERHASIL' if result else 'GAGAL'} ===")