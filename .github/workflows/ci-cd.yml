name: CI/CD Pipeline - Crypto Trading AI Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: crypto-gpts-api

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_crypto_trading
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r dependencies.txt
        pip install pytest pytest-flask pytest-mock coverage
        
    - name: Set Test Environment Variables
      run: |
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_crypto_trading" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
        echo "SESSION_SECRET=test-secret" >> $GITHUB_ENV
        
    - name: Run Security Checks
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Run Linting
      run: |
        pip install flake8 black
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check . || echo "Code formatting issues found"
        
    - name: Run Tests with Coverage
      run: |
        coverage run -m pytest -v
        coverage xml
        coverage report
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Test API Endpoints
      run: |
        python -c "
        import requests
        import time
        import subprocess
        import sys
        
        # Start the application in background
        proc = subprocess.Popen([sys.executable, 'main.py'], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
        
        # Wait for startup
        time.sleep(10)
        
        try:
            # Test health endpoint
            response = requests.get('http://localhost:5000/health', timeout=5)
            assert response.status_code == 200, f'Health check failed: {response.status_code}'
            print('‚úÖ Health check passed')
            
            # Test API status
            response = requests.get('http://localhost:5000/api/gpts/status', timeout=10)
            assert response.status_code == 200, f'Status check failed: {response.status_code}'
            print('‚úÖ API status check passed')
            
            print('üéØ All API tests passed!')
            
        finally:
            proc.terminate()
            proc.wait()
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging Environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add staging deployment commands here
        # e.g., SSH to staging server, pull latest image, restart services
        echo "‚úÖ Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Production Environment
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add production deployment commands here
        # e.g., SSH to production server, pull latest image, restart services
        echo "‚úÖ Production deployment completed"
        
    - name: Run Post-Deployment Health Checks
      run: |
        echo "üîç Running post-deployment health checks..."
        # Add health check commands here
        echo "‚úÖ Health checks passed"
        
    - name: Notify Deployment Success
      if: success()
      run: |
        echo "üì¢ Deployment notification sent"
        # Add notification logic (Slack, Discord, etc.)

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Performance Tests
      run: |
        echo "‚ö° Running performance tests..."
        # Add performance testing commands here
        # e.g., load testing with artillery, k6, or similar tools
        echo "‚úÖ Performance tests completed"