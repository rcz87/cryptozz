#!/usr/bin/env python3
"""
Ambil analisa SOL dan kirim ke Telegram dengan format yang tepat
"""
import os
import sys
import asyncio
import requests
import json
from datetime import datetime

# Add current directory to path
sys.path.append('.')

def get_sol_analysis():
    """Get SOL analysis from local API"""
    try:
        response = requests.get(
            "http://localhost:5000/api/gpts/sinyal/tajam",
            params={"symbol": "SOLUSDT", "format": "both"},
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"API Error: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"Request failed: {e}")
        return None

async def send_sol_to_telegram():
    """Send SOL analysis to Telegram"""
    try:
        print("=== SOL ANALISA DAN TELEGRAM BROADCAST ===")
        
        # Get SOL analysis
        print("📊 Mengambil analisa SOL...")
        sol_data = get_sol_analysis()
        
        if not sol_data:
            print("❌ Gagal mengambil data SOL")
            return False
            
        print("✅ Data SOL berhasil diambil")
        print(f"   Symbol: {sol_data.get('symbol', 'N/A')}")
        print(f"   Signal: {sol_data.get('signal', 'N/A')}")
        print(f"   Confidence: {sol_data.get('confidence', 0)*100:.1f}%")
        print(f"   Current Price: ${sol_data.get('current_price', 0)}")
        
        # Initialize Telegram bot
        print("\n🤖 Inisialisasi Telegram bot...")
        from core.telegram_bot import TelegramBot
        
        bot = TelegramBot()
        bot_info = await bot.bot.get_me()
        print(f"✅ Bot @{bot_info.username} siap")
        
        # Create comprehensive signal data for Telegram
        telegram_signal = {
            "symbol": sol_data.get('symbol', 'SOLUSDT'),
            "signal": sol_data.get('signal', 'NEUTRAL'),
            "confidence": sol_data.get('confidence', 0.5),
            "entry_price": sol_data.get('entry_price', sol_data.get('current_price', 0)),
            "take_profit": sol_data.get('take_profit', 0),
            "stop_loss": sol_data.get('stop_loss', 0),
            "current_price": sol_data.get('current_price', 0),
            "indicators_triggered": sol_data.get('indicators_triggered', []),
            "narrative": sol_data.get('human_readable', '')[:300] + "...",
            "xai_explanation": {
                "decision": sol_data.get('signal', 'NEUTRAL'),
                "confidence": sol_data.get('confidence', 0.5) * 100,
                "explanation": sol_data.get('human_readable', '')[:200] + "..."
            }
        }
        
        # Send to Telegram
        print("\n📱 Mengirim analisa SOL ke Telegram...")
        
        if bot.chat_ids and len(bot.chat_ids) > 0:
            await bot.send_signal(telegram_signal)
            print(f"✅ Analisa SOL terkirim ke {len(bot.chat_ids)} subscribers")
        else:
            print("⚠️ Tidak ada subscribers terdaftar")
            print("\n📋 Preview pesan Telegram:")
            
            # Show formatted message preview
            symbol = telegram_signal['symbol']
            signal = telegram_signal['signal']
            confidence = telegram_signal['confidence']
            current_price = telegram_signal['current_price']
            entry_price = telegram_signal['entry_price']
            take_profit = telegram_signal['take_profit']
            stop_loss = telegram_signal['stop_loss']
            
            signal_emoji = "🟢" if signal in ["BUY", "LONG"] else "🔴" if signal in ["SELL", "SHORT"] else "⚪"
            
            preview_msg = f"""
{signal_emoji} <b>SHARP SIGNAL ALERT - SOL ANALYSIS</b> {signal_emoji}

📊 <b>Pair:</b> {symbol}
📈 <b>Signal:</b> {signal}
💯 <b>Confidence:</b> {confidence*100:.1f}%

💰 <b>Current Price:</b> ${current_price:,.2f}
💰 <b>Entry Price:</b> ${entry_price:,.2f}
🎯 <b>Take Profit:</b> ${take_profit:,.2f}
🛡 <b>Stop Loss:</b> ${stop_loss:,.2f}

📝 <b>Analisa Smart Money Concept:</b>
{telegram_signal['narrative']}

🤖 <b>XAI Explanation:</b>
{telegram_signal['xai_explanation']['explanation']}

⏰ <b>Waktu:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} WIB

<i>Generated by RZC GPS Trading Bot</i>
"""
            
            print(preview_msg.strip())
            
            print("\n💡 Untuk menerima analisa ini secara otomatis:")
            print("1. Buka Telegram dan cari: @rzcgpsbot")
            print("2. Kirim perintah /start untuk berlangganan")
            print("3. Bot akan mengirim signal otomatis seperti ini")
        
        # Show detailed analysis data
        print("\n=== DETAIL ANALISA SOL ===")
        print(f"Symbol: {sol_data.get('symbol')}")
        print(f"Timeframe: {sol_data.get('timeframe', '1H')}")
        print(f"Signal: {sol_data.get('signal')}")
        print(f"Direction: {sol_data.get('direction')}")
        print(f"Confidence: {sol_data.get('confidence', 0)*100:.1f}%")
        print(f"Current Price: ${sol_data.get('current_price', 0):.2f}")
        print(f"Entry Price: ${sol_data.get('entry_price', 0):.2f}")
        print(f"Take Profit: ${sol_data.get('take_profit', 0):.2f}")
        print(f"Stop Loss: ${sol_data.get('stop_loss', 0):.2f}")
        
        if sol_data.get('indicators_triggered'):
            print(f"Indicators: {', '.join(sol_data['indicators_triggered'])}")
            
        if sol_data.get('human_readable'):
            print(f"Analysis Length: {len(sol_data['human_readable'])} karakter")
            
        return True
        
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    result = asyncio.run(send_sol_to_telegram())
    print(f"\n=== HASIL: {'BERHASIL' if result else 'GAGAL'} ===")